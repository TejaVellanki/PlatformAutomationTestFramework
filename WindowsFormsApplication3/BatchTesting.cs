// Generated by .NET Reflector from C:\Program Files\Default Company Name\Selenium Test Tool\MoBankUI.exe
namespace MoBankUI
{
    using OpenQA.Selenium;
    using Selenium;
    using System;
    
    internal class BatchTesting
    {
        private MoBankUI.Screenshot screenshot = new MoBankUI.Screenshot();
        
        public void batchtesting(string items, string url, IWebDriver driver, ISelenium selenium, datarow_TPS datarowTPS)
        {
            string[] strArray = items.Split(new char[] { ',' });
            int num = 0;
            foreach (string str in strArray)
            {
                try
                {
                    switch (str)
                    {
                        case "Test All Links in Mosite":
                            datarowTPS.newrowTPS("", "", "All Links in Mosite - Validations", "", driver, selenium);
                            new links_TPS().Links(datarowTPS, driver, selenium, url);
                            num++;
                            break;
                        
                        case "Test Footer Links":
                            datarowTPS.newrowTPS("", "", "Footer Links", "", driver, selenium);
                            new Footer_TPS().Footerhome(driver, selenium, url, datarowTPS);
                            num++;
                            break;
                        
                        case "Test Basket Functionality":
                            datarowTPS.newrowTPS("", "", "Basket Functionality", "", driver, selenium);
                            new Baskets_TPS().Basket(driver, selenium, datarowTPS, url);
                            num++;
                            break;
                        
                        case "Test Product page - Test Add Product to Basket":
                            datarowTPS.newrowTPS("", "", "User Journey", "", driver, selenium);
                            new UserJourney_TPS().UserJourn(datarowTPS, driver, selenium, url);
                            num++;
                            break;
                        
                        case "Test Delete From Basket - Test product Unavailable":
                            datarowTPS.newrowTPS("", "", "Delete From Basket", "", driver, selenium);
                            new Deletebasketstart().deletebasstart(driver, selenium, datarowTPS);
                            num++;
                            break;
                        
                        case "Test Registration/Login - CheckOut Pages":
                            datarowTPS.newrowTPS("", "", "Registration/Login", "", driver, selenium);
                            new LoginRegistration().registration(driver, selenium, datarowTPS);
                            num++;
                            break;
                        
                        case "Test Mopay":
                            datarowTPS.newrowTPS("", "", "Mopay", "", driver, selenium);
                            new Mopay_TPS().Mopay(driver, selenium, datarowTPS);
                            num++;
                            break;
                    }
                }
                catch (Exception exception)
                {
                    string str2 = exception.ToString();
                    datarowTPS.newrowTPS("Exception", "", "Exception Not Expected", "FAIL", driver, selenium);
                    this.screenshot.screenshotfailed(driver, selenium);
                }
            }
        }
    }
}
