// Generated by .NET Reflector from C:\Program Files\Default Company Name\Selenium Test Tool\MoBankUI.exe
namespace MoBankUI
{
    using Microsoft.Office.Interop.Excel;
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.OleDb;
    using System.Drawing;
    using System.Globalization;
    
    internal class GeneralLibraryTPS
    {
        private Application xlApp;
        
        public string ConsolidatedXmlExportToExcelTPS(System.Data.DataTable dt, _Worksheet ws, bool nextRow, bool isCompare, bool isPolicyWiseSummary)
        {
            int num2;
            int num3;
            object[,] objArray = new object[dt.Rows.Count + 1, dt.Columns.Count];
            int count = 0;
            if (nextRow)
            {
                if (ws.UsedRange.Rows.Count == 1)
                {
                    count = ws.UsedRange.Rows.Count;
                    if (isCompare)
                    {
                        count += 2;
                    }
                }
                else if (isPolicyWiseSummary)
                {
                    count = ws.UsedRange.Rows.Count;
                }
                else
                {
                    count = ws.UsedRange.Rows.Count + 1;
                }
            }
            else
            {
                count = ws.UsedRange.Rows.Count;
            }
            if (count <= 1)
            {
                for (num2 = 0; num2 < dt.Columns.Count; num2++)
                {
                    objArray[0, num2] = dt.Columns[num2].ColumnName;
                }
                for (num2 = 0; num2 < dt.Columns.Count; num2++)
                {
                    num3 = 0;
                    while (num3 < dt.Rows.Count)
                    {
                        objArray[num3 + 1, num2] = dt.Rows[num3].ItemArray[num2];
                        num3++;
                    }
                }
            }
            else
            {
                if (isCompare || isPolicyWiseSummary)
                {
                    for (num2 = 0; num2 < dt.Columns.Count; num2++)
                    {
                        objArray[0, num2] = dt.Columns[num2].ColumnName;
                    }
                    for (num2 = 0; num2 < dt.Columns.Count; num2++)
                    {
                        num3 = 0;
                        while (num3 < dt.Rows.Count)
                        {
                            objArray[num3 + 1, num2] = dt.Rows[num3].ItemArray[num2];
                            num3++;
                        }
                    }
                }
                else
                {
                    for (num2 = 0; num2 < dt.Columns.Count; num2++)
                    {
                        for (num3 = 0; num3 < dt.Rows.Count; num3++)
                        {
                            objArray[num3, num2] = dt.Rows[num3].ItemArray[num2];
                        }
                    }
                }
                if (dt.Rows.Count > 0)
                {
                    ((Microsoft.Office.Interop.Excel.Range) ws.Rows[count + dt.Rows.Count, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Yellow);
                }
            }
            string str = string.Empty;
            string str2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            int length = str2.Length;
            if (dt.Columns.Count > length)
            {
                str = str2.Substring(((dt.Columns.Count - 1) / length) - 1, 1);
            }
            str = str + str2.Substring((dt.Columns.Count - 1) % length, 1);
            string str3 = string.Empty;
            if (count > 1)
            {
                if (nextRow)
                {
                    str3 = string.Format(CultureInfo.InvariantCulture, "A{1}:{0}{2}", new object[] { str, count, count + dt.Rows.Count });
                }
                else
                {
                    str3 = string.Format(CultureInfo.InvariantCulture, "A{1}:{0}{2}", new object[] { str, count + 1, count + dt.Rows.Count });
                }
            }
            else
            {
                str3 = string.Format(CultureInfo.InvariantCulture, "A{1}:{0}{2}", new object[] { str, count, ws.UsedRange.Rows.Count + dt.Rows.Count });
            }
            count = (count + dt.Rows.Count) + dt.Rows.Count;
            ws.get_Range(str3, Type.Missing).NumberFormat = "@";
            ws.get_Range(str3, Type.Missing).Value2 = objArray;
            ws.get_Range(str3, Type.Missing).EntireColumn.AutoFit();
            int num5 = 2;
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                ((Microsoft.Office.Interop.Excel.Range) ws.Rows[1, Type.Missing]).Font.Bold = true;
                ((Microsoft.Office.Interop.Excel.Range) ws.Rows[1, Type.Missing]).Font.Color = ColorTranslator.ToOle(Color.LightGray);
                ((Microsoft.Office.Interop.Excel.Range) ws.Rows[1, Type.Missing]).Interior.Color = Color.Blue;
                ((Microsoft.Office.Interop.Excel.Range) ws.Rows[num5, Type.Missing]).Borders.Color = ColorTranslator.ToOle(Color.Black);
                ((Microsoft.Office.Interop.Excel.Range) ws.Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.LightGray);
                string str4 = dt.Rows[i]["Total Number Of Test Cases Passed/Failed"].ToString();
                switch (dt.Rows[i]["PASS or FAIL"].ToString())
                {
                    case "PASS":
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[1, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.LightGreen);
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[2, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.LightGreen);
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[3, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.LightGreen);
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[4, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.LightGreen);
                        break;
                    
                    case "FAIL":
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[1, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Red);
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[2, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Red);
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[3, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Red);
                        ((Microsoft.Office.Interop.Excel.Range) ((dynamic) ws.Columns[4, Type.Missing]).Rows[num5, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Red);
                        break;
                }
                num5++;
                if (str4.Contains("Passed"))
                {
                    ((dynamic) ((Microsoft.Office.Interop.Excel.Range) ws.Columns[5, Type.Missing]).Rows[2, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Green);
                }
                if (str4.Contains("Failed"))
                {
                    ((dynamic) ((Microsoft.Office.Interop.Excel.Range) ws.Columns[5, Type.Missing]).Rows[3, Type.Missing]).Interior.Color = ColorTranslator.ToOle(Color.Red);
                }
            }
            return (str + "," + count);
        }
        
        public Workbook CreateAndOpenExcelFileTPS(string filePath, ref string fileName, string sheetName, string extension, bool displayAlerts, bool appendDateField)
        {
            Workbook workbook2;
            try
            {
                this.xlApp = (Application) Activator.CreateInstance(Type.GetTypeFromCLSID(new Guid("00024500-0000-0000-C000-000000000046")));
                this.xlApp.DisplayAlerts = displayAlerts;
                this.xlApp.ScreenUpdating = displayAlerts;
                this.xlApp.Visible = displayAlerts;
                this.xlApp.UserControl = displayAlerts;
                this.xlApp.Interactive = displayAlerts;
                if (appendDateField)
                {
                    string str = this.GenerateRandomNumberTPS();
                    fileName = fileName + "-" + str;
                }
                Workbook workbook = this.xlApp.Workbooks.Add(XlWBATemplate.xlWBATWorksheet);
                workbook.SaveAs(filePath + @"\" + fileName, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing, XlSaveAsAccessMode.xlNoChange, Type.Missing, Type.Missing, Type.Missing, Type.Missing, Type.Missing);
                if (!string.IsNullOrEmpty(sheetName))
                {
                    Sheets worksheets = workbook.Worksheets;
                    int count = workbook.Sheets.Count;
                    Worksheet after = (Worksheet) worksheets.get_Item(count);
                    ((Worksheet) worksheets.Add(Type.Missing, after, 1, Type.Missing)).Name = sheetName;
                    for (int i = 1; i <= workbook.Sheets.Count; i++)
                    {
                        Worksheet worksheet3 = (Worksheet) workbook.Worksheets.get_Item(i);
                        if ("Sheet1" == worksheet3.Name.ToString())
                        {
                            worksheet3.Delete();
                            workbook.Save();
                            break;
                        }
                    }
                }
                workbook2 = workbook;
            }
            catch (Exception exception)
            {
                throw exception;
            }
            return workbook2;
        }
        
        public string GenerateRandomNumberTPS()
        {
            return (DateTime.Now.Year.ToString(CultureInfo.InvariantCulture) + "-" + DateTime.Now.Month.ToString(CultureInfo.InvariantCulture) + "-" + DateTime.Now.Day.ToString(CultureInfo.InvariantCulture) + "_" + DateTime.Now.Hour.ToString(CultureInfo.InvariantCulture) + "-" + DateTime.Now.Minute.ToString(CultureInfo.InvariantCulture) + "-" + DateTime.Now.Second.ToString(CultureInfo.InvariantCulture));
        }
        
        public DataSet GetExcelDataTPS(string excelFile, string sheetname)
        {
            List<string> list = new List<string>();
            OleDbConnection connection = new OleDbConnection("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + excelFile + ";Extended Properties=Excel 12.0;");
            connection.Open();
            OleDbCommand command = new OleDbCommand("SELECT * FROM [" + sheetname + "$]", connection);
            OleDbDataAdapter adapter = new OleDbDataAdapter {
                SelectCommand = command
            };
            DataSet dataSet = new DataSet {
                Locale = CultureInfo.InvariantCulture
            };
            adapter.Fill(dataSet);
            connection.Close();
            return dataSet;
        }
        
        public void SaveAndCloseExcelTPS(_Workbook workbook)
        {
            for (int i = 1; i <= workbook.Sheets.Count; i++)
            {
                Worksheet worksheet = (Worksheet) workbook.Worksheets.get_Item(i);
                if ("Sheet1" == worksheet.Name.ToString())
                {
                    workbook.Save();
                    worksheet.Delete();
                    workbook.Save();
                    break;
                }
            }
            workbook.Save();
            workbook.Close(null, null, null);
            if (this.xlApp != null)
            {
                this.xlApp.Quit();
                this.xlApp = null;
            }
            GC.Collect();
        }
    }
}
